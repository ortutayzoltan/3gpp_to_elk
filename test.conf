input {
  file { 
    path => "C:/Users/ortut/Documents/Projects/3gpp_to_elk/results/NebulaTek_20240821_211500_HardwareUtilization_0001.xml"  # Path to your XML files
    start_position => "beginning"
    sincedb_path => "NUL"  # NUL is the Windows equivalent of /dev/null
    codec => multiline {
      pattern => "^<\?xml"
      negate => "true"
      what => "previous"
    }
  }
}


filter {
  xml {
    source => "message"
    store_xml => false
    target => "parsed_xml"  # Store the parsed XML to work with it later
    namespaces => {
      "ns" => "http://www.3gpp.org/ftp/specs/latest/Rel-15/32_series/32432-790.xml"
    }
    xpath => [
      "/ns:measData/ns:measInfo/ns:measValue", "measValues",  # Extract all measValue elements
      "/ns:measData/ns:fileFooter/ns:measDataCollectionEndTime/text()", "timestamp"  # Extract timestamp
    ]
  }

  # Split each measValue element into a separate event
  split {
    field => "[measValues]"
    target => "measValue"
  }

  # Extract fields from each measValue event
  xml {
    source => "measValue"
    store_xml => false
    xpath => [
      "string(//measValue/@measObjLdn)", "measObjLdn",
      "/measValue/r[@p='1']/text()", "cpu_utilization",
      "/measValue/r[@p='2']/text()", "memory_utilization",
      "/measValue/r[@p='3']/text()", "disk_utilization"
    ]
  }

  mutate {
    convert => {
      "cpu_utilization" => "integer"
      "memory_utilization" => "integer"
      "disk_utilization" => "integer"
    }

  }

  mutate {
    split => ["measObjLdn", "/"]
    add_field => {
      "machine_id" => "%{[measObjLdn][-1]}"
    }
  }

  mutate {
    gsub => [
      "machine_id", "TEST/DATA/", ""
    ]
  }
}

output {
  stdout { codec => rubydebug }
}